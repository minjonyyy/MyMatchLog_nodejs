import mysql from 'mysql2/promise';
import dotenv from 'dotenv';

// ÌÖåÏä§Ìä∏ ÌôòÍ≤ΩÏóêÏÑúÎäî .env.test ÌååÏùºÏùÑ ÏÇ¨Ïö©
if (process.env.NODE_ENV === 'test') {
  dotenv.config({ path: '.env.test' });
} else {
  dotenv.config();
}

// ÏãúÎî©Ïö© Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Ïó∞Í≤∞ ÏÉùÏÑ±
const createSeedingPool = () => {
  return mysql.createPool({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME || 'mymatchlog_dev',
    port: process.env.DB_PORT || 3306,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0,
    timezone: '+09:00', // ÌïúÍµ≠ ÏãúÍ∞ÑÎåÄ ÏÑ§Ï†ï
  });
};

const stadiumsData = [
  { name: 'Ïû†Ïã§ÏïºÍµ¨Ïû•', city: 'ÏÑúÏö∏', capacity: 25000 },
  { name: 'Í≥†Ï≤ôÏä§Ïπ¥Ïù¥Îèî', city: 'ÏÑúÏö∏', capacity: 16000 },
  { name: 'Ïù∏Ï≤úSSGÎûúÎçîÏä§ÌïÑÎìú', city: 'Ïù∏Ï≤ú', capacity: 23000 },
  { name: 'Í¥ëÏ£ºÍ∏∞ÏïÑÏ±îÌîºÏñ∏Ïä§ÌïÑÎìú', city: 'Í¥ëÏ£º', capacity: 27000 },
  { name: 'ÏÇ¨ÏßÅÏïºÍµ¨Ïû•', city: 'Î∂ÄÏÇ∞', capacity: 28000 },
  { name: 'ÎåÄÍµ¨ÏÇºÏÑ±ÎùºÏù¥Ïò®Ï¶àÌååÌÅ¨', city: 'ÎåÄÍµ¨', capacity: 24000 },
  { name: 'Ï∞ΩÏõêNCÌååÌÅ¨', city: 'Ï∞ΩÏõê', capacity: 22000 },
  { name: 'ÏàòÏõêKTÏúÑÏ¶àÌååÌÅ¨', city: 'ÏàòÏõê', capacity: 18000 },
  { name: 'ÎåÄÏ†ÑÌïúÌôîÏÉùÎ™ÖÏù¥Í∏ÄÏä§ÌååÌÅ¨', city: 'ÎåÄÏ†Ñ', capacity: 13000 },
  { name: 'Í≥†ÏñëÏúÑÏ¶àÌååÌÅ¨', city: 'Í≥†Ïñë', capacity: 20000 },
];

const teamsData = [
  { name: 'LG Ìä∏ÏúàÏä§', stadium_id: 1 },
  { name: 'ÎëêÏÇ∞ Î≤†Ïñ¥Ïä§', stadium_id: 1 },
  { name: 'SSG ÎûúÎçîÏä§', stadium_id: 3 },
  { name: 'ÌÇ§ÏõÄ ÌûàÏñ¥Î°úÏ¶à', stadium_id: 2 },
  { name: 'NC Îã§Ïù¥ÎÖ∏Ïä§', stadium_id: 7 },
  { name: 'KIA ÌÉÄÏù¥Í±∞Ï¶à', stadium_id: 4 },
  { name: 'Î°ØÎç∞ ÏûêÏù¥Ïñ∏Ï∏†', stadium_id: 5 },
  { name: 'ÏÇºÏÑ± ÎùºÏù¥Ïò®Ï¶à', stadium_id: 6 },
  { name: 'ÌïúÌôî Ïù¥Í∏ÄÏä§', stadium_id: 9 },
  { name: 'kt wiz', stadium_id: 8 },
];

const seedStadiums = async (connection) => {
  console.log('üöÄ Starting to seed stadiums data...');

  // To prevent duplicate entries, clear the table first
  await connection.query('DELETE FROM stadiums');
  // Reset auto-increment counter
  await connection.query('ALTER TABLE stadiums AUTO_INCREMENT = 1');

  for (const stadium of stadiumsData) {
    const query =
      'INSERT INTO stadiums (name, city, capacity) VALUES (?, ?, ?)';
    await connection.query(query, [
      stadium.name,
      stadium.city,
      stadium.capacity,
    ]);
    console.log(`‚úÖ Seeded: ${stadium.name}`);
  }

  console.log('üéâ Stadiums data seeding completed successfully.');
};

const seedTeams = async (connection) => {
  console.log('üöÄ Starting to seed teams data...');

  // To prevent duplicate entries, clear the table first
  await connection.query('DELETE FROM teams');
  // Reset auto-increment counter
  await connection.query('ALTER TABLE teams AUTO_INCREMENT = 1');

  for (const team of teamsData) {
    const query = 'INSERT INTO teams (name, stadium_id) VALUES (?, ?)';
    await connection.query(query, [team.name, team.stadium_id]);
    console.log(`‚úÖ Seeded: ${team.name}`);
  }

  console.log('üéâ Teams data seeding completed successfully.');
};

const runSeeding = async () => {
  let connection;
  let pool;
  try {
    pool = createSeedingPool();
    connection = await pool.getConnection();

    await seedStadiums(connection);
    await seedTeams(connection);

    console.log('üéâ All seeding completed successfully.');
  } catch (err) {
    console.error('‚ùå Error during seeding:', err);
    process.exit(1);
  } finally {
    if (connection) {
      connection.release();
    }
    if (pool) {
      await pool.end();
    }
  }
};

runSeeding();
