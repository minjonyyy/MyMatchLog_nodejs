name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # 코드 품질 검사 및 테스트
  test:
    name: Test and Quality Check
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_DATABASE: mymatchlog_test
          MYSQL_PASSWORD: testpassword
          MYSQL_ROOT_PASSWORD: testpassword
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

      redis:
        image: redis:latest
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create test environment file
        run: |
          cp env.test.example .env.test
          echo "DB_HOST=127.0.0.1" >> .env.test
          echo "REDIS_HOST=127.0.0.1" >> .env.test

      - name: Install Redis CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y redis-tools

      - name: Wait for services to be ready
        run: |
          echo "Waiting for MySQL..."
          while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
            sleep 1
          done
          echo "MySQL is ready!"

          echo "Waiting for Redis..."
          for i in {1..30}; do
            mysqladmin ping -h"127.0.0.1" -P"3306" --silent && break
            sleep 1
          done
          echo "Redis is ready!"

      - name: Run database migration
        run: npm run db:migrate
        env:
          NODE_ENV: test

      - name: Run database seeding
        run: npm run db:seed
        env:
          NODE_ENV: test

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run tests
        run: npm run test:ci
        env:
          NODE_ENV: test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Docker 빌드 및 테스트
  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t mymatchlog-api .

      - name: Test Docker image
        run: |
          # Docker 컨테이너가 정상적으로 시작되는지 테스트
          docker run -d --name test-container -p 3001:3000 mymatchlog-api
          sleep 10

          # 헬스체크
          curl -f http://localhost:3001/api/health || exit 1

          # 컨테이너 정리
          docker stop test-container
          docker rm test-container

  # 보안 취약점 검사
  security:
    name: Security Check
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

  # 빌드 검증
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Verify build
        run: |
          # 앱이 정상적으로 시작되는지 확인
          timeout 10s npm start || true
          echo "Build verification completed"
